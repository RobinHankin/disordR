% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-


\documentclass{article}

\usepackage{arxiv}

\usepackage[utf8]{inputenc} % allow utf-8 input
\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{amsfonts}       % blackboard math symbols
\usepackage{amssymb}        % needed for \leqslant
\usepackage{amsmath}        % needed for cases
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\usepackage{lipsum}		% Can be removed after putting your text content
\usepackage{graphicx}
\usepackage{natbib}
\usepackage{doi}
\usepackage{xcolor}



\title{Disordered vectors in R}

%\date{September 9, 1985}	% Here you can change the date presented in the paper title
%\date{} 					% Or removing it

\author{ \href{https://orcid.org/0000-0001-5982-0415}{\includegraphics[width=0.03\textwidth]{orcid.pdf}\hspace{1mm}Robin K. S.~Hankin}\thanks{\href{https://academics.aut.ac.nz/robin.hankin}{work};  
\href{https://www.youtube.com/watch?v=JzCX3FqDIOc&list=PL9_n3Tqzq9iWtgD8POJFdnVUCZ_zw6OiB&ab_channel=TrinTragulaGeneralRelativity}{play}} \\
 Auckland University of Technology\\
	\texttt{hankin.robin@gmail.com} \\
}

% Uncomment to remove the date
%\date{}

% Uncomment to override  the `A preprint' in the header
%\renewcommand{\headeright}{Technical Report}
%\renewcommand{\undertitle}{Technical Report}
\renewcommand{\shorttitle}{The \textit{disordR} package}

%%% Add PDF metadata to help others organize their library
%%% Once the PDF is generated, you can check the metadata with
%%% $ pdfinfo template.pdf
\hypersetup{
pdftitle={The disordR package},
pdfsubject={q-bio.NC, q-bio.QM},
pdfauthor={Robin K. S.~Hankin},
pdfkeywords={disord vectors}
}

\begin{document}
\maketitle

%% an abstract and keywords
\begin{abstract}

This document motivates and discusses the concept of ``disordered
vector".  The standard use-case is coefficients of multivariate
polynomials as used by the {\tt mvp} package.  Values and keys of a
map are stored in an implementation-specific way so certain extraction
and replacement operations should be forbidden: for example, the
``first" value is implementation specific\ldots but the maximum value
has a well-defined result.  The {\tt disordR} package makes forbidden
operations impossible while allowing transparent R idiom for permitted
operations.  An illustrative R session is given in which the package
is used abstractly, without reference to any particular application,
and then shows how it is used in the {\tt mvp} package.  The {\tt
disordR} package is a dependency of {\tt clifford}, {\tt freealg},
{\tt hyper2}, {\tt mvp}, {\tt spray}, {\tt stokes}, and {\tt weyl}.
The {\tt disordR} package is available on CRAN at
\url{https://CRAN.R-project.org/package=spray}.  \end{abstract}
\keywords{Disordered vectors}

<<setup,echo=FALSE,print=FALSE>>=
ignore <- require("disordR")
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
@ 


\section{Prologue}

Consider the {\tt freealg} package, here is a typical use-case:

<<>>=
library("mvp")
(P <- as.mvp("5+6*x+7*x*y"))
@
We might wish to access the coefficients of {\tt P}:

\begin{Schunk}
\begin{Sinput}
coeffs(P)
\end{Sinput}
\color{red}
\begin{Soutput}
[1] 5 6 7   # red indicates fictional, cautionary output
\end{Soutput}
\end{Schunk}

\color{black} The (red) output above is misleading because the object
is a map whose coefficients are stored in an implementation-specific
order.  Thus we might represent it as any of the following six ways:

\begin{verbatim}

{}   -> 5     {x}  -> 6     {xy} -> 7
{}   -> 5     {xy} -> 7     {x}  -> 6   
{x}  -> 6     {}   -> 5     {xy} -> 7  
{x}  -> 6     {xy} -> 7     {}   -> 5        
{xy} -> 7     {}   -> 5     {x}  -> 6
{xy} -> 7     {x}  -> 6     {}   -> 5         
\end{verbatim}


The \color{red}red \color{black} output arbitrarily (and possibly
misleadingly) chooses the first of these, when the order of storage is
implementation-specific.  We need a new type of object to represent
the coefficients of a freealg object.

However, we might wish to find the maximum coefficient:

<<>>=
max(coeffs(P))   # perfectly well-defined
@

We might wish to tabulate even or odd coefficients:

<<>>=
table(coeffs(P) %% 2)   # perfectly well-defined
@

Or we might wish to over-write certain coefficients based on their values:

<<>>=
coeffs(P)[coeffs(P) < 6] <- 100
P
@

It seems that there are some allowed operations and some forbidden
operations.  The {\tt disordR} package provides a coherent platform
for this.

\section{Introduction}

Accessing elements of an {\tt mvp} object is problematic because the
order of the terms of an {\tt mvp} object is not well-defined.  This
is because the {\tt map} class of the {\tt STL} does not specify an
order for the key-value pairs (and indeed the actual order in which
they are stored may be implementation dependent).  The situation is
applicable to any package which uses the {\tt STL} in a similar way.




\color{black} A {\tt disord} object is a vector of coefficients of a
{\tt mvp} object.  But it is not a conventional vector; in a
conventional vector, we can identify the first element unambiguously,
and the second, and so on.  An {\tt mvp} object is a map from terms to
coefficients, and a map has no intrinsic ordering: the maps

\begin{verbatim}
x -> 1, y -> 3, xy -> 3, xy^3 -> 4
\end{verbatim}

and

\begin{verbatim}
xy^3 -> 4, xy -> 3, x -> 1, y -> 3
\end{verbatim}

are the same map and correspond to the same multinomial (symbolically,
$x+3y+3xy+4xy^3=4xy^3+3xy+x+3y$).  Thus the coefficients of the
multinomial might be \verb+c(1,3,3,4)+ or \verb+c(4,3,1,3)+, or indeed
any ordering.  Internally, the elements are stored in some order but
the order used is implementation-specific.  Quite often, I am
interested in the coefficients {\em per se}, without consideration of
their meaning in the context of a multivariate polynomial.  I might
ask:

\begin{itemize}
\item  ``How many coefficients are there?"
\item  ``What is the largest coefficient?"
\item  ``Are any coefficients exactly equal to one?"
\item  ``How many coefficients are greater than 2?"
\end{itemize}

These are reasonable and mathematically meaningful questions.  Compare
a meaningless question: ``what is the second coefficient?".  This is
meaningless because of the order ambiguity discussed above: the answer
is at best implementation-specific, but fundamentally it is a question
that one should not be allowed to ask.

To deal with the coefficients in isolation in R, one might be tempted
to use a multiset.  However, this approach does not allow one to link
the coefficients with the terms.  Suppose I coerce the coefficients to
a multiset object (as per the {\tt sets} package, for example): then
it is impossible to extract the terms with coefficient greater than 2
(which would be the polynomial $3y+3xy+4xy^3$) because the link
between the coefficients and the terms is not included in the multiset
object.  Sensible questions involving this aspect of {\tt mvp} objects
might be:


\begin{itemize}
\item Give me all terms with coefficients greater than 2
\item Give me all terms with positive coefficients
\item Give me all terms with integer coefficients
\end{itemize}

and these questions cannot be answered if the the coefficients are
stored as a multiset (compare inadmissible questions such as ``give me
the first three terms").  Further note that replacement methods are
mathematically meaningful, for example:


\begin{itemize}
\item Set any term with a negative coefficient to zero
\item Add 100 to any coefficient less than 30
\end{itemize}

Again these operations are reasonable but precluded by multiset
formalism (compare inadmissible replacements: ``replace the first two
terms with zero", or ``double the last term" would be inadmissible).

{\bf\em\Large What we need is a system that forbids stupid questions
and stupid operations, while transparently permitting sensible
questions and operations}

The `disord` class of the `disordR` package is specificially designed
for this situation.  This class of object has a slot for the
coefficients in the form of a numeric R vector, but also another slot
which uses hash codes to prevent users from misusing the ordering of
the numeric vector.
   
For example, a multinomial $x+2y+3z$ might have coefficients {\tt
c(1,2,3)} or {\tt c(3,1,2)}.  Package idiom to extract the
coefficients of a multivariate polynomial {\tt a} is {\tt coeffs(a)};
but this cannot return a standard numeric vector.  If stored as a
numeric vector, the user might ask ``what is the first element?" and
this question should not be asked [and certainly not answered!],
because the elements are stored in an implementation-specific order.
The {\tt disordR} package uses {\tt disord} objects which are designed
to return an error if such inadmissible questions are asked.  But {\tt
disord} objects can answer admissible questions and perform admissible
operations.

Suppose we have two multivariate polynomials, {\tt a} as defined as
above with $a=x+2y+3z$ and $b=x+3y+4z$.  Even though the sum $a+b$ is
well-defined algebraically, idiom such as {\tt coeffs(a) + coeffs(b)}
is not defined because there is no guarantee that the coefficients of
the two multivariate polynomials are stored in the same order.  We
might have {\tt c(1,2,3)+c(1,3,4)=c(2,5,7)} or {\tt
c(1,2,3)+c(1,4,3)=c(2,6,6)}, with neither being more ``correct" than
the other.  In the package, this ambiguity is rendered void: {\tt
coeffs(a) + coeffs(b)} will return an error.  Note carefully that {\tt
coeffs(a+b)} is perfectly well defined, although the result is subject
to the same ambiguity as {\tt coeffs(a)}.

In the same way, {\tt coeffs(a) + 1:3} is not defined and will return
an error.  Further, idiom such as {\tt coeffs(a) <- 1:3} and {\tt
coeffs(a) <- coeffs(b)} are not defined and will also return an error.
However, note that

\begin{Schunk}
\begin{Sinput}
coeffs(a) + coeffs(a)
coeffs(a) + coeffs(a)^2
coeffs(a) <- coeffs(a)^2
coeffs(a) <- coeffs(a)^2 + 7
\end{Sinput}
\end{Schunk}


are perfectly well defined, with package idiom behaving as expected.
In the assignments, one does not need to know the order of the left
hand side, so long as the order is the same on both sides.  The
idiomatic English equivalent would be: ``the coefficient of each term
of {\tt a} becomes its square"; note that this operation is
insensitive to the order of coefficients.  The whole shebang is
intended to make idiom such as {\tt coeffs(a) <- coeffs(a)\%\%2}
possible, so we can manipulate polynomials over finite rings, here
$Z/2Z$.

The replacement methods are defined so that an expression like {\tt
coeffs(a)[coeffs(a) < 5] <- 0} works as expected; the English idiom
would be ``replace any coefficient less than 5 with 0".  To fix ideas,
consider a fixed small mvp object:

<<>>=
library("mvp")
a <- as.mvp("5 a c^3 + a^2 d^2 f^2 + 4 a^3 b e^3 + 3 b c f + 2 b^2 e^3")
a
@

Extraction presents issues; consider {\tt coeffs(a) < 3}.  This object
has Boolean elements but has the same ordering ambiguity as {\tt
coeffs(a)}.  One might expect that we could use this to extract
elements of {\tt coeffs(a)}: specifically, those elements less than 5.
We may use replace methods for coefficients if this makes sense.
Idiom such as

<<>>=
coeffs(a)[coeffs(a)<5] <- 4 + coeffs(a)[coeffs(a)<5]
coeffs(a) <- pmax(coeffs(a),3)
@

is algebraically meaningful and allowed in the package.
Idiomatically: ``Add 4 to any element less than 5"; ``coefficients
become the parallel maximum of themselves and 3" respectively.
Further note that {\tt coeffs(a) <- rev(coeffs(a))} is disallowed
(although {\tt coeffs(a) <- rev(rev(coeffs(a)))} is meaningful and
admissible).

So the output of {\tt coeffs(x)} is defined only up to an unknown
rearrangement.  The same considerations apply to the output of {\tt
vars()}, which returns a list of character vectors in an undefined
order, and the output of {\tt powers()}, which returns a numeric list
whose elements are in an undefined order.  However, even though the
order of these three objects is undefined individually, their ordering
is jointly consistent in the sense that the first element of {\tt
coeffs(x)} corresponds to the first element of {\tt vars(x)} and the
first element of {\tt powers(x)}.  The identity of this element is not
defined---but whatever it is, the first element of all three accessor
methods refers to it.

Note also that a single term (something like \verb+4a3*b*c^6+) has the same
issue: the variables are not stored in a well-defined order.  This
does not matter because the algebraic value of the term does not
depend on the order in which the variables appear and this term would
be equivalent to \verb+4bc^6*a^3+.

\section{An R session with the {\tt disordR} package}

We will use the {\tt disordR} package to show how the idiom works.

<<>>=
library("disordR")
set.seed(0)
a <- rdis()
a
@

Object {\tt a} is a {\tt disord} object but it behaves similarly to a
regular numeric vector in many ways:

<<>>=
a^2
a+1/a
@

Above, note how the result has the same hash code as {\tt a}.  Other
operations that make sense are {\tt max()} and {\tt sort()}:

<<>>=
max(a)
sort(a)
@

Above, see how the result is a standard numeric vector.  However,
inadmissible operations give an error:

\begin{Schunk}
\begin{Sinput}
a[1]  # asking for the first element is inadmissible
a[1] <- 1000 # also cannot replace the first element
\end{Sinput}
\end{Schunk}


Standard R semantics generally work as expected:

<<>>=
x <- a + 1/a
x
y <- a*2-9
y
x+y
@

Above, observe that objects {\tt a}, {\tt x} and {\tt y} have the
same hash code: they are ``compatible", in {\tt disordR} idiom.
However, if we try to combine object {\tt a} with another object with
different hash, we get errors:

<<>>=
b <- rdis()
@


\begin{Schunk}
\begin{Sinput}
b
a
a+b
\end{Sinput}
\begin{Soutput}

disordR discipline error in:

a + b
Error in check_matching_hash(e1, e2, match.call()) : 
hash codes 2d177a73a46711360f5ce7c077a7b74c9fed0bfc and
   c69a5f8000ccc99e18dd8d1c8f7ea89550b98a13 do not match
> 
\end{Soutput}
\end{Schunk}


The error is given because objects {\tt a} and {\tt b} are stored in
an implementation-specific order (we say that {\tt a} and {\tt b} are
{\em incompatible}).  In the package, many extract and replace methods
are implemented whenever this is admissible:

<<>>=
a[a<0.5] <- 0  # round down
a
b[b>0.6] <- b[b>0.6] + 3  # add 3 to every element greater than 0.6
b
@

Usual semantics follow, provided one is careful to maintain the hash
code:

<<>>=
d <- disord(1:10)
d
e <- 10 + 3*d - d^2
e
e<4
d[e<4] <- e[e<4]
d
@

Above, the replacement command works because `d` and `e` {\em and}
`e<4` [which is a Boolean `disord` object] all have the same hash
code.

\section{An R session with the {\tt mvp} package}

The {\tt mvp} package implements multivariate polynomials using the
{\tt STL} map class.  Following commands only work as intended here
with {\tt mvp >= 1.0-12}.  Below we see how {\tt disordR} idiom allows
mathematically meaningful operation while suppressing inadmissible
ones:

<<>>=
set.seed(0)
a <- rmvp()
b <- rmvp()
a
b
@

Observe that standard multivariate polynomial algebra works:

<<>>=
a + 2*b
(a+b)*(a-b) == a^2-b^2   # should be TRUE (expression is quite long)
@

We can extract the coefficients of these polynomials using the
{\tt coeffs()} function:

<<>>=
coeffs(a)
coeffs(b)
@

observe that the coefficients are returned as a {\tt disord}  object.
We may manipulate the coefficients of a polynomial in many ways.  We
may do the following things:

<<>>=
coeffs(a)[coeffs(a) < 4] <- 0   # set any coefficient of a that is <4 to zero
a
coeffs(b) <- coeffs(b)%%2       # consider coefficients of b modulo 2
b
@

However, many operations which have reasonable idiom are in fact
meaningless and are implicitly prohibited.  For example:


<<>>=
x <- rmvp()     # set up new mvp objects x and y
y <- rmvp()
@

Then the following should all produce errors:

\begin{Schunk}
\begin{Sinput}
coeffs(x) + coeffs(y)  # order implementation specific
coeffs(x) <- coeffs(y) # ditto
coeffs(x) <- 1:2       # replacement value not length 1
coeffs(x)[coeffs(x) < 3] <- coeffs(x)[coeffs(y) < 3]
\end{Sinput}
\begin{Soutput}
[1] 5 6 7   # red indicates fictional, cautionary output
\end{Soutput}
\end{Schunk}



\section{Functions {\tt vars()} and {\tt powers()} return {\tt disord} objects}


The {\tt disord()} function takes a list argument, and this is useful
for working with {\tt mvp} objects:

<<>>=
(a <- as.mvp("x^2 + 4 - 3*x*y*z"))
vars(a)
powers(a)
coeffs(a)
@

Note that the hash of all three objects is identical, generated from
the polynomial itself (not just the relevant element of the
three-element list that is an {\tt mvp} object).  This allows us to do
some rather interesting things:

<<>>=
double <- function(x){2*x}
(a <- rmvp())
pa <- powers(a)
va <- vars(a)
ca <- coeffs(a)
pa[ca<4] <- sapply(pa,double)[ca<4]
mvp(va,pa,ca)
@

Above, {\tt a} was a multivariate polynomial and we doubled the powers
of all variables in terms with coefficients less than 4. Or even:

<<>>=
a <- as.mvp("3 + 5*a*b - 7*a*b*x^2 + 2*a*b^2*c*d*x*y -6*x*y + 8*a*b*c*d*x")
a
pa <- powers(a)
va <- vars(a)
ca <- coeffs(a)
va[sapply(pa,length) > 4] <- sapply(va,toupper)[sapply(pa,length) > 4]
mvp(va,pa,ca)
@

Above, we took multivariate polynomial {\tt a} and replaced the variable
names in every term with more than four variables with their uppercase
equivalents.

\end{document}